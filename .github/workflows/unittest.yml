name: Unit Tests

on:
  push:
    branches:
      - 'main'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Update setuptools
        run: |
          pip install --upgrade pip
          pip install setuptools==78.1.1 wheel==0.45.1

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$PYTHONPATH:${{ github.workspace }}/src" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          export PIP_DEFAULT_TIMEOUT=300
          pip install -q -e ".[dev,sandbox,agentscope,langgraph,agno,a2a,autogen]"

      - name: Load Docker images
        run: |
          docker load -i ${{ github.workspace }}/docker-cache/runtime-sandbox-base.tar || echo "Base image not found in cache"
          docker load -i ${{ github.workspace }}/docker-cache/runtime-sandbox-filesystem.tar || echo "Filesystem image not found in cache"
          docker load -i ${{ github.workspace }}/docker-cache/runtime-sandbox-browser.tar || echo "Browser image not found in cache"
          docker load -i ${{ github.workspace }}/docker-cache/runtime-sandbox-appworld.tar || echo "Appworld image not found in cache"
          docker load -i ${{ github.workspace }}/docker-cache/runtime-sandbox-appworld-arm64.tar || echo "Appworld ARM64 image not found in cache"

      - name: Verify Docker images
        run: |
          echo "Verifying Docker images..."
          docker images | grep "agentscope/runtime-sandbox-base" || true
          docker images | grep "agentscope/runtime-sandbox-filesystem" || true
          docker images | grep "agentscope/runtime-sandbox-browser" || true
          docker images | grep "agentscope/runtime-sandbox-appworld" || true

      - name: Run tests with coverage
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
        run: |
          coverage run -m pytest tests

      - name: Generate coverage report
        run: |
          coverage report -m